{"ast":null,"code":"var _jsxFileName = \"/Users/nat/nology/non-coursework/nats-university/nats-university/src/components/StudentForm/SubjectFormField.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Field } from \"formik\";\nimport { OutlinedInput, InputLabel, MenuItem, FormControl, Select, Chip, Box } from \"@mui/material\"; // const SubjectFormField = (name, label, helpMessage) => {\n//     return (\n//         <>\n//         <Field name={name}>\n//             {({ field, form, meta }) => (\n//             <Select label={label}>\n//                 <MenuItem>Philosophy</MenuItem>\n//             </Select>\n//             // <TextField\n//             //     {...field}\n//             //     label={label}\n//             //     sx={{ mb: 1, mr: 1 }}\n//             //     error={meta.error && meta.touched}\n//             //     helperText={meta.error && meta.touched && helpMessage}\n//             // />\n//             )}\n//         </Field>\n//         </>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SubjectFormField = _ref => {\n  _s();\n\n  let {\n    name,\n    label,\n    helpMessage,\n    initialSubjectValues\n  } = _ref;\n  const [selectedSubjects, setSelectedSubjects] = useState(initialSubjectValues);\n  const taughtSubjects = [\"Accountancy\", \"Biology\", \"Classics\", \"Creative Writing\", \"Economics\", \"French\", \"Geography\", \"German\", \"Mathematics\", \"Philosophy\", \"Photography\"]; // const handleChange = (event) => {\n  //     const {\n  //       target: { value },\n  //     } = event;\n  //     setSelectedSubjects(\n  //     //   typeof value === 'string' ? value.split(',') : value,\n  //     value\n  //     );\n  //     console.log(value)\n  //   };\n\n  const handleChange = event => {\n    setSelectedSubjects( //   typeof value === 'string' ? value.split(',') : value,\n    event.target.value);\n  }; // return (\n  //     <>\n  //         <FormControl sx={{ mb: 1, minWidth: 250, maxWidth: 350}}>\n  //         <InputLabel id=\"subjects-label\">{label}</InputLabel>\n  //         <Select \n  //             labelId=\"subjects-label\"\n  //             id=\"subjects\"\n  //             multiple\n  //             value={selectedSubjects}\n  //             onChange={handleChange}\n  //             input={<OutlinedInput id=\"select-multiple-chip\" label=\"Subjects\" />} \n  //             renderValue={(selected) => (\n  //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n  //                     {selected.map((value) => (\n  //                     <Chip key={value} label={value} />\n  //                     ))}\n  //                 </Box>\n  //                 )}\n  //             >\n  //             {taughtSubjects.map((subject) => (<MenuItem key={subject} value={subject}>{subject}</MenuItem>))}\n  //         </Select>\n  //         </FormControl>\n  //     </>\n  // )\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Field, {\n      name: name,\n      children: _ref2 => {\n        let {\n          field,\n          form,\n          meta\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(FormControl, {\n          sx: {\n            mb: 1,\n            minWidth: 250,\n            maxWidth: 350\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"subjects-label\",\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"subjects-label\",\n            id: \"subjects\",\n            multiple: true // error={meta.error && meta.touched}\n            // helperText={meta.error && meta.touched && helpMessage}\n            ,\n            value: selectedSubjects,\n            onChange: handleChange,\n            input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n              id: \"select-multiple-chip\",\n              label: \"Subjects\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 28\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 0.5\n              },\n              children: selected.map(value => /*#__PURE__*/_jsxDEV(Chip, {\n                label: value\n              }, value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 25\n            }, this),\n            children: taughtSubjects.map(subject => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: subject,\n              children: subject\n            }, subject, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 55\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SubjectFormField, \"P6pfiJCcxiUzj3VolzVgbcth9SA=\");\n\n_c = SubjectFormField;\nexport default SubjectFormField;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubjectFormField\");","map":{"version":3,"sources":["/Users/nat/nology/non-coursework/nats-university/nats-university/src/components/StudentForm/SubjectFormField.jsx"],"names":["React","useState","Field","OutlinedInput","InputLabel","MenuItem","FormControl","Select","Chip","Box","SubjectFormField","name","label","helpMessage","initialSubjectValues","selectedSubjects","setSelectedSubjects","taughtSubjects","handleChange","event","target","value","field","form","meta","mb","minWidth","maxWidth","selected","display","flexWrap","gap","map","subject"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Field } from \"formik\";\nimport { OutlinedInput, InputLabel, MenuItem, FormControl, Select, Chip, Box} from \"@mui/material\";\n\n// const SubjectFormField = (name, label, helpMessage) => {\n//     return (\n//         <>\n//         <Field name={name}>\n//             {({ field, form, meta }) => (\n                \n//             <Select label={label}>\n//                 <MenuItem>Philosophy</MenuItem>\n//             </Select>\n//             // <TextField\n//             //     {...field}\n//             //     label={label}\n//             //     sx={{ mb: 1, mr: 1 }}\n//             //     error={meta.error && meta.touched}\n//             //     helperText={meta.error && meta.touched && helpMessage}\n//             // />\n            \n\n//             )}\n//         </Field>\n//         </>\n//     )\n// }\n\nconst SubjectFormField = ({name, label, helpMessage, initialSubjectValues}) => {\n    const [selectedSubjects, setSelectedSubjects] = useState(initialSubjectValues)\n    const taughtSubjects = [\"Accountancy\", \"Biology\", \"Classics\", \"Creative Writing\", \"Economics\", \"French\", \"Geography\", \"German\", \"Mathematics\", \"Philosophy\", \"Photography\"]\n\n    // const handleChange = (event) => {\n    //     const {\n    //       target: { value },\n    //     } = event;\n    //     setSelectedSubjects(\n    //     //   typeof value === 'string' ? value.split(',') : value,\n    //     value\n        \n    //     );\n    //     console.log(value)\n    //   };\n      const handleChange = (event) => {\n        setSelectedSubjects(\n        //   typeof value === 'string' ? value.split(',') : value,\n        event.target.value\n        \n        );\n       \n      };\n\n    // return (\n    //     <>\n    //         <FormControl sx={{ mb: 1, minWidth: 250, maxWidth: 350}}>\n    //         <InputLabel id=\"subjects-label\">{label}</InputLabel>\n    //         <Select \n    //             labelId=\"subjects-label\"\n    //             id=\"subjects\"\n    //             multiple\n    //             value={selectedSubjects}\n    //             onChange={handleChange}\n    //             input={<OutlinedInput id=\"select-multiple-chip\" label=\"Subjects\" />} \n    //             renderValue={(selected) => (\n    //                 <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n    //                     {selected.map((value) => (\n    //                     <Chip key={value} label={value} />\n    //                     ))}\n    //                 </Box>\n    //                 )}\n    //             >\n    //             {taughtSubjects.map((subject) => (<MenuItem key={subject} value={subject}>{subject}</MenuItem>))}\n    //         </Select>\n    //         </FormControl>\n    //     </>\n    // )\n    return (\n        <>\n        <Field name={name}>\n            {({ field, form, meta }) => (\n                <FormControl sx={{ mb: 1, minWidth: 250, maxWidth: 350}}>\n                <InputLabel id=\"subjects-label\">{label}</InputLabel>\n                <Select \n                    labelId=\"subjects-label\"\n                    id=\"subjects\"\n                    multiple\n                    // error={meta.error && meta.touched}\n                    // helperText={meta.error && meta.touched && helpMessage}\n                    value={selectedSubjects}\n                    onChange={handleChange}\n                    input={<OutlinedInput id=\"select-multiple-chip\" label=\"Subjects\" />} \n                    renderValue={(selected) => (\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                            {selected.map((value) => (\n                            <Chip key={value} label={value} />\n                            ))}\n                        </Box>\n                        )}\n                    >\n                    {taughtSubjects.map((subject) => (<MenuItem key={subject} value={subject}>{subject}</MenuItem>))}\n                </Select>\n                </FormControl>\n            )\n            }\n        </Field>\n        </>\n    )\n}\nexport default SubjectFormField\n"]},"metadata":{},"sourceType":"module"}